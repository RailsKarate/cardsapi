h1. Macro Cards This is the macro cards API.  To use it you will first need an application key.  You can find out more at macro.cards/apiref.

*Version:* 1.0.0

----

{toc:printable=true|style=square|minLevel=2|maxLevel=3|type=list|outline=false|include=.*}

h2. Endpoints

    h3. countCardsByTag
    {status:colour=Yellow|title=get|subtle=false}
    {code}
    get /cards/countByTag
    {code}
    *Summary:* Number of Cards available by Tag
    *Description:* Returns list of tags and a count of available cards for each.  Excludes cards which the user has answered correctly in the past.


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     successful operation
        {code:title=Response Type}
tagCount
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "successful operation",
  "schema" : {
    "$ref" : "#/definitions/tagCount"
  }
}
        {code}
        *Status Code:* 400
        *Message:*     Invalid tag value
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Invalid tag value"
}
        {code}
    ----

    h3. countCardsByTagAll
    {status:colour=Yellow|title=get|subtle=false}
    {code}
    get /cards/countByTagAll
    {code}
    *Summary:* Number of Cards available for a Tag combination
    *Description:* Shows how many cards are available that have ALL the supplied tags


    h4. Parameters



        h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |tags |Muliple tags can be comma separated in an array. |(/) | |  |




    h4. Responses
        *Status Code:* 200
        *Message:*     successful operation
        {code:title=Response Type}
tagCountObj
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "successful operation",
  "schema" : {
    "$ref" : "#/definitions/tagCountObj"
  }
}
        {code}
        *Status Code:* 400
        *Message:*     Invalid tag value
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Invalid tag value"
}
        {code}
    ----

    h3. countCardsByTagAny
    {status:colour=Yellow|title=get|subtle=false}
    {code}
    get /cards/countByTagAny
    {code}
    *Summary:* Number of Cards available for a Tag combination
    *Description:* Shows how many cards are available that have ANY of the supplied tags


    h4. Parameters



        h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |tags |Muliple tags can be comma separated in an array. |(/) | |  |




    h4. Responses
        *Status Code:* 200
        *Message:*     successful operation
        {code:title=Response Type}
tagCountObj
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "successful operation",
  "schema" : {
    "$ref" : "#/definitions/tagCountObj"
  }
}
        {code}
        *Status Code:* 400
        *Message:*     Invalid tag value
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Invalid tag value"
}
        {code}
    ----

    h3. findCardByTagAll
    {status:colour=Yellow|title=get|subtle=false}
    {code}
    get /cards/findByTagAll
    {code}
    *Summary:* Find a Card with ALL supplied Tags
    *Description:*  The backend will return a card that contains all the supplied tags.  The number of correct answers in a row will also be returned.  If this request is submitted by the same user from 2 browsers within 2 minutes, the first card will be deemed to have been answered incorrectly.  If it is found that the user&#39;s previous question was not answered within 2 minutes, it will be marked as incorrect.  If the users previous card was answered incorrectly, or it is the users first card for this tag combination, then an easy card will be returned.  Otherwise cards will be returned with progressive difficulty.


    h4. Parameters



        h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |tags |Muliple tags can be comma separated in an array. |(/) | |  |




    h4. Responses
        *Status Code:* 200
        *Message:*     successful operation
        {code:title=Response Type}
Question
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "successful operation",
  "schema" : {
    "$ref" : "#/definitions/Question"
  }
}
        {code}
        *Status Code:* 400
        *Message:*     Invalid tag value
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Invalid tag value"
}
        {code}
    ----

    h3. findCardByTagAny
    {status:colour=Yellow|title=get|subtle=false}
    {code}
    get /cards/findByTagAny
    {code}
    *Summary:* Find a Card with ANY of the supplied tags
    *Description:* As per findByTagAll but will match ANY tag.


    h4. Parameters



        h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |tags |Tags to filter by |(/) | |  |




    h4. Responses
        *Status Code:* 200
        *Message:*     successful operation
        {code:title=Response Type}
Question
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "successful operation",
  "schema" : {
    "$ref" : "#/definitions/Question"
  }
}
        {code}
        *Status Code:* 400
        *Message:*     Invalid tag value
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Invalid tag value"
}
        {code}
    ----

    h3. verifyCard
    {status:colour=Yellow|title=put|subtle=false}
    {code}
    put /cards/{questionId}/verify
    {code}
    *Summary:* Get result and explanation
    *Description:* Returns the result (pass / fail), the correct answer and the explanation.  Number of tokens earned (if any) is also returned.  If the user had started another Card in another browser in the last 2 minutes, that Card is marked incorrect (after this one). If the user had &#39;timed out&#39; from a previous question, then that Card is marked incorrect (before this one, hence losing the streak).   


    h4. Parameters
        h5. Path Parameters
        ||Name||Description||Required||Default||Pattern||
        |questionId |ID of question to verify |(/) | |  |







    h4. Responses
        *Status Code:* 200
        *Message:*     successful operation
        {code:title=Response Type}
cardResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "successful operation",
  "schema" : {
    "$ref" : "#/definitions/cardResponse"
  }
}
        {code}
        *Status Code:* 400
        *Message:*     Invalid ID supplied
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Invalid ID supplied"
}
        {code}
        *Status Code:* 404
        *Message:*     Question not found
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Question not found"
}
        {code}
    ----

    h3. voteCard
    {status:colour=Yellow|title=put|subtle=false}
    {code}
    put /cards/{questionId}/vote
    {code}
    *Summary:* Vote on a question
    *Description:* Users can vote questions up (good quality) or down (poor quality).  The user is NOT able to vote if they have previously viewed statistics for this question (and therefore know who it was created by)


    h4. Parameters
        h5. Path Parameters
        ||Name||Description||Required||Default||Pattern||
        |questionId |ID of question |(/) | |  |







    h4. Responses
        *Status Code:* 200
        *Message:*     successful operation
        {code:title=Response Type}
cardStatistics
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "successful operation",
  "schema" : {
    "$ref" : "#/definitions/cardStatistics"
  }
}
        {code}
        *Status Code:* 400
        *Message:*     Invalid ID supplied
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Invalid ID supplied"
}
        {code}
        *Status Code:* 404
        *Message:*     Question not found
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Question not found"
}
        {code}
    ----

    h3. deleteQuestion
    {status:colour=Yellow|title=delete|subtle=false}
    {code}
    delete /submit/{questionId}
    {code}
    *Summary:* Deletes a question
    *Description:* Marks question as deleted


    h4. Parameters
        h5. Path Parameters
        ||Name||Description||Required||Default||Pattern||
        |questionId |Question id to delete |(/) | |  |







    h4. Responses
        *Status Code:* 400
        *Message:*     Invalid ID supplied
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Invalid ID supplied"
}
        {code}
        *Status Code:* 404
        *Message:*     Question not found
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Question not found"
}
        {code}
    ----

    h3. editQuestion
    {status:colour=Yellow|title=put|subtle=false}
    {code}
    put /submit/{questionId}
    {code}
    *Summary:* Edit a question
    *Description:* Accepts a question, set of answers, an explanation, and performs server side validation of the result


    h4. Parameters
        h5. Path Parameters
        ||Name||Description||Required||Default||Pattern||
        |questionId |question ID to update |(/) | |  |

        h5. Body Parameter
        ||Name||Description||Required||Default||Pattern||
        |body |Created user card |(/) | |  |






    h4. Responses
        *Status Code:* 405
        *Message:*     Invalid input
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Invalid input"
}
        {code}
    ----

    h3. submitQuestion
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /submit
    {code}
    *Summary:* Submit a new question to the question bank
    *Description:* Accepts a question, set of answers, an explanation, and performs server side validation of the result


    h4. Parameters

        h5. Body Parameter
        ||Name||Description||Required||Default||Pattern||
        |body |Created user card |(/) | |  |






    h4. Responses
        *Status Code:* 405
        *Message:*     Invalid input
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Invalid input"
}
        {code}
    ----

    h3. getTags
    {status:colour=Yellow|title=get|subtle=false}
    {code}
    get /tags
    {code}
    *Summary:* Retrieve list of available tags
    *Description:* The user needs to choose a tag with which to play the game


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     successful operation
        {code:title=Response Type}
array[Tag]
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "successful operation",
  "schema" : {
    "type" : "array",
    "items" : {
      "$ref" : "#/definitions/Tag"
    }
  }
}
        {code}
        *Status Code:* 404
        *Message:*     No tags found
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "No tags found"
}
        {code}
    ----

    h3. updateTag
    {status:colour=Yellow|title=put|subtle=false}
    {code}
    put /tags/{tagId}
    {code}
    *Summary:* Update an existing tag
    *Description:* Update tag name or description


    h4. Parameters
        h5. Path Parameters
        ||Name||Description||Required||Default||Pattern||
        |tagId |ID of tag to update |(/) | |  |







    h4. Responses
        *Status Code:* 200
        *Message:*     successful operation
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "successful operation"
}
        {code}
        *Status Code:* 400
        *Message:*     Invalid ID supplied
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Invalid ID supplied"
}
        {code}
        *Status Code:* 404
        *Message:*     Tag not found
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Tag not found"
}
        {code}
        *Status Code:* 405
        *Message:*     Validation exception
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Validation exception"
}
        {code}
    ----

    h3. deleteUser
    {status:colour=Yellow|title=delete|subtle=false}
    {code}
    delete /user/{userId}
    {code}
    *Summary:* Delete user
    *Description:* This can only be done by the logged in user.


    h4. Parameters
        h5. Path Parameters
        ||Name||Description||Required||Default||Pattern||
        |userId |The name that needs to be deleted |(/) | |  |







    h4. Responses
        *Status Code:* 400
        *Message:*     Invalid userid supplied
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Invalid userid supplied"
}
        {code}
        *Status Code:* 404
        *Message:*     User not found
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "User not found"
}
        {code}
    ----

    h3. getUserByName
    {status:colour=Yellow|title=get|subtle=false}
    {code}
    get /user/{userId}
    {code}
    *Summary:* Get user by user id
    *Description:* 


    h4. Parameters
        h5. Path Parameters
        ||Name||Description||Required||Default||Pattern||
        |userId |The ID that needs to be fetched.  |(/) | |  |







    h4. Responses
        *Status Code:* 200
        *Message:*     successful operation
        {code:title=Response Type}
User
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "successful operation",
  "schema" : {
    "$ref" : "#/definitions/User"
  }
}
        {code}
        *Status Code:* 400
        *Message:*     Invalid username supplied
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Invalid username supplied"
}
        {code}
        *Status Code:* 404
        *Message:*     User not found
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "User not found"
}
        {code}
    ----

    h3. userLogin
    {status:colour=Yellow|title=get|subtle=false}
    {code}
    get /user/login
    {code}
    *Summary:* verifies an authentication request and issues key
    *Description:* Server will validate the authentication and issue a key.  If the authentication provider did not release an email address then a 403 response is given, and user must provide email.


    h4. Parameters



        h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |authToken |authentication token following user sign up |(/) | |  |
|authProvider |authentication provider (eg Linkedin / Github) |(/) | |  |




    h4. Responses
        *Status Code:* 200
        *Message:*     successful operation
        {code:title=Response Type}
String
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "successful operation",
  "schema" : {
    "type" : "string",
    "example" : "myMacroCardsAuthKey88234lksdvadkfj23452"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     email required
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "email required"
}
        {code}
    ----

h2. Models

        h3. Answers
        ||Field Name||Required||Type||Description||
         |answerId | |Long | |
 |answerText | |String | |
        h3. CardResponse
        ||Field Name||Required||Type||Description||
         |result | |String |pass/fail |
 |answerId | |Long |the id of the correct answer |
 |answerText | |String |the correct answer text (needed for user input) |
 |explanationText | |String | |
 |voteResultPrevious | |Integer |The users previous vote - 0&#x3D;unvoted, 1&#x3D;down, 2&#x3D;up |
 |voteLock | |Integer |If it is the users own question, or they have previously viewed the statistics, the vote is locked (else the vote may be skewed by who wrote the question) |
 |tokensEarned | |Long |The number of tokens earned (if any).  For the first card, 2 tokens are deducted. For card 5 and beyond, 1 token is earned. |
        h3. CardStatistics
        ||Field Name||Required||Type||Description||
         |authorName | |String |the user name of the person who submited the card |
 |authorId | |Long | |
 |timesTaken | |Long |number of times this question has been taken |
 |percentCorrect | |Long |percentage of correct answers |
 |averageTime | |Long |average number of milliseconds to answer question correctly |
        h3. NewCard
        ||Field Name||Required||Type||Description||
         |questionType | |String |Question Type |
 |questionTitle | |String | |
 |questionBody | |String | |
 |answers | |submitAnswers | |
 |explanationText | |String | |
 |tags | |array[Long] |comma separated list of ID tags |
        h3. Question
        ||Field Name||Required||Type||Description||
         |questionId | |Long | |
 |questionType | |String |Question Type |
 |questionTitle | |String | |
 |questionBody | |String | |
 |answers | |array[Answers] | |
 |streak | |Integer |number of consecutive cards answered correctly on current streak |
        h3. SubmitAnswers
        ||Field Name||Required||Type||Description||
         |answerText | |String | |
 |isCorrect | |Long | |
        h3. Tag
        ||Field Name||Required||Type||Description||
         |tagId | |Long | |
 |name | |String | |
 |desc | |String | |
        h3. TagCount
        ||Field Name||Required||Type||Description||
                h3. TagCountObj
        ||Field Name||Required||Type||Description||
         |tagId | |Long |tagId is zero for combination tag counts |
 |tagCount | |Long | |
        h3. User
        ||Field Name||Required||Type||Description||
         |id | |Long | |
 |username | |String | |
 |firstName | |String | |
 |lastName | |String | |
 |email | |String | |
