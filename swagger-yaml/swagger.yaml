---
swagger: "2.0"
info:
  description: "This is the macro cards API.  To use it you will first need an application\
    \ key.  You can find out more at macro.cards/apiref. "
  version: "1.0.0"
  title: "Macro Cards"
  termsOfService: "https://macro.cards/terms/"
  contact:
    email: "support@macropeople.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "virtserver.swaggerhub.com"
basePath: "/rawsas/test2/1.0.0"
tags:
- name: "tags"
  description: "Choose a tag"
- name: "cards"
  description: "This mode will only return questions that have never been answered\
    \ correctly."
  externalDocs:
    description: "Find out more"
    url: "http://macro.cards/about"
- name: "sessions"
  description: "Taking a timed exam"
- name: "submit"
  description: "adding a question to the question bank"
  externalDocs:
    description: "Find out more "
    url: "http://macro.cards/docs"
schemes:
- "https"
paths:
  /tags:
    get:
      tags:
      - "tags"
      summary: "Retrieve list of available tags"
      description: "The user needs to choose a tag with which to play the game"
      operationId: "getTags"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tag"
        404:
          description: "No tags found"
  /tags/{tagId}:
    put:
      tags:
      - "tags"
      summary: "Update an existing tag"
      description: "Update tag name or description"
      operationId: "updateTag"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "tagId"
        in: "path"
        description: "ID of tag to update"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Tag not found"
        405:
          description: "Validation exception"
  /cards:
    post:
      tags:
      - "submit"
      - "cards"
      summary: "Submit a new question to the question bank"
      description: "Accepts a question, set of answers, an explanation, and performs\
        \ server side validation of the result"
      operationId: "submitQuestion"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user card"
        required: true
        schema:
          $ref: "#/definitions/newCard"
      responses:
        405:
          description: "Invalid input"
  /cards/countByTag:
    get:
      tags:
      - "cards"
      summary: "Number of Cards available by Tag"
      description: "Returns list of tags and a count of available cards for each.\
        \  Excludes cards which the user has answered correctly in the past."
      operationId: "countCardsByTag"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/tagCount"
        400:
          description: "Invalid tag value"
  /cards/countByTagAll:
    get:
      tags:
      - "cards"
      summary: "Number of Cards available for a Tag combination"
      description: "Shows how many cards are available that have ALL the supplied\
        \ tags"
      operationId: "countCardsByTagAll"
      produces:
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Muliple tags can be comma separated in an array."
        required: true
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/tagCountObj"
        400:
          description: "Invalid tag value"
  /cards/countByTagAny:
    get:
      tags:
      - "cards"
      summary: "Number of Cards available for a Tag combination"
      description: "Shows how many cards are available that have ANY of the supplied\
        \ tags"
      operationId: "countCardsByTagAny"
      produces:
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Muliple tags can be comma separated in an array."
        required: true
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/tagCountObj"
        400:
          description: "Invalid tag value"
  /cards/findByTagAll:
    get:
      tags:
      - "cards"
      summary: "Find a Card with ALL supplied Tags"
      description: " The backend will return a card that contains all the supplied\
        \ tags.  The number of correct answers in a row will also be returned.  If\
        \ this request is submitted by the same user from 2 browsers within 2 minutes,\
        \ the first card will be deemed to have been answered incorrectly.  If it\
        \ is found that the user's previous question was not answered within 2 minutes,\
        \ it will be marked as incorrect.  If the users previous card was answered\
        \ incorrectly, or it is the users first card for this tag combination, then\
        \ an easy card will be returned.  Otherwise cards will be returned with progressive\
        \ difficulty."
      operationId: "findCardByTagAll"
      produces:
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Muliple tags can be comma separated in an array."
        required: true
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Question"
        400:
          description: "Invalid tag value"
  /cards/findByTagAny:
    get:
      tags:
      - "cards"
      summary: "Find a Card with ANY of the supplied tags"
      description: "As per findByTagAll but will match ANY tag."
      operationId: "findCardByTagAny"
      produces:
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Question"
        400:
          description: "Invalid tag value"
  /cards/{questionId}/verify:
    put:
      tags:
      - "cards"
      summary: "Get result and explanation"
      description: "Returns the result (pass / fail), the correct answer and the explanation.\
        \  Number of tokens earned (if any) is also returned.  If the user had started\
        \ another Card in another browser in the last 2 minutes, that Card is marked\
        \ incorrect (after this one). If the user had 'timed out' from a previous\
        \ question, then that Card is marked incorrect (before this one, hence losing\
        \ the streak).   "
      operationId: "verifyCard"
      produces:
      - "application/json"
      parameters:
      - name: "questionId"
        in: "path"
        description: "ID of question to verify"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/cardResponse"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Question not found"
  /cards/{questionId}/vote:
    put:
      tags:
      - "cards"
      summary: "Vote on a question"
      description: "Users can vote questions up (good quality) or down (poor quality).\
        \  The user is NOT able to vote if they have previously viewed statistics\
        \ for this question (and therefore know who it was created by)"
      operationId: "voteCard"
      produces:
      - "application/json"
      parameters:
      - name: "questionId"
        in: "path"
        description: "ID of question"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/cardStatistics"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Question not found"
  /submit/{questionId}:
    put:
      tags:
      - "submit"
      summary: "Edit a question"
      description: "Accepts a question, set of answers, an explanation, and performs\
        \ server side validation of the result"
      operationId: "editQuestion"
      produces:
      - "application/json"
      parameters:
      - name: "questionId"
        in: "path"
        description: "question ID to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Created user card"
        required: true
        schema:
          $ref: "#/definitions/newCard"
      responses:
        405:
          description: "Invalid input"
    delete:
      tags:
      - "submit"
      summary: "Deletes a question"
      description: "Marks question as deleted"
      operationId: "deleteQuestion"
      parameters:
      - name: "questionId"
        in: "path"
        description: "Question id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Question not found"
  /user/login:
    get:
      tags:
      - "user"
      summary: "verifies an authentication request and issues key"
      description: "Server will validate the authentication and issue a key.  If the\
        \ authentication provider did not release an email address then a 403 response\
        \ is given, and user must provide email."
      operationId: "userLogin"
      produces:
      - "application/json"
      parameters:
      - name: "authToken"
        in: "query"
        description: "authentication token following user sign up"
        required: true
        type: "string"
      - name: "authProvider"
        in: "query"
        description: "authentication provider (eg Linkedin / Github)"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
            example: "myMacroCardsAuthKey88234lksdvadkfj23452"
        403:
          description: "email required"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "Get user by user id"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The ID that needs to be fetched. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid userid supplied"
        404:
          description: "User not found"
definitions:
  Question:
    type: "object"
    properties:
      questionId:
        type: "integer"
        format: "int64"
      questionType:
        type: "string"
        description: "Question Type"
        enum:
        - "Single Answer"
        - "Multiple Choice"
        - "User Input"
      questionTitle:
        type: "string"
      questionBody:
        type: "string"
      answers:
        type: "array"
        items:
          $ref: "#/definitions/Answers"
      streak:
        type: "integer"
        description: "number of consecutive cards answered correctly on current streak"
  Answers:
    type: "object"
    properties:
      answerId:
        type: "integer"
        format: "int64"
      answerText:
        type: "string"
  cardResponse:
    type: "object"
    properties:
      result:
        type: "string"
        description: "pass/fail"
        enum:
        - "pass"
        - "fail"
      answerId:
        type: "integer"
        format: "int64"
        description: "the id of the correct answer"
      answerText:
        type: "string"
        example: "XYZ"
        description: "the correct answer text (needed for user input)"
      explanationText:
        type: "string"
        example: "you should have choosed XYZ, stupid"
      voteResultPrevious:
        type: "integer"
        example: 2
        description: "The users previous vote - 0=unvoted, 1=down, 2=up"
      voteLock:
        type: "integer"
        example: 0
        description: "If it is the users own question, or they have previously viewed\
          \ the statistics, the vote is locked (else the vote may be skewed by who\
          \ wrote the question)"
      tokensEarned:
        type: "integer"
        format: "int64"
        example: -2
        description: "The number of tokens earned (if any).  For the first card, 2\
          \ tokens are deducted. For card 5 and beyond, 1 token is earned."
  cardStatistics:
    type: "object"
    properties:
      authorName:
        type: "string"
        example: "community"
        description: "the user name of the person who submited the card"
      authorId:
        type: "integer"
        format: "int64"
      timesTaken:
        type: "integer"
        format: "int64"
        description: "number of times this question has been taken"
      percentCorrect:
        type: "integer"
        format: "int64"
        description: "percentage of correct answers"
      averageTime:
        type: "integer"
        format: "int64"
        description: "average number of milliseconds to answer question correctly"
  newCard:
    type: "object"
    required:
    - "answers"
    - "explanationText"
    - "questionBody"
    - "questionTitle"
    - "questionType"
    properties:
      questionType:
        type: "string"
        description: "Question Type"
        enum:
        - "Single Answer"
        - "Multiple Choice"
        - "User Input"
      questionTitle:
        type: "string"
        example: "My very clever title"
      questionBody:
        type: "string"
        example: "What comes of nothing?"
      answers:
        $ref: "#/definitions/submitAnswers"
      explanationText:
        type: "string"
        example: "nothing comes of nothing"
      tags:
        type: "array"
        description: "comma separated list of ID tags"
        items:
          type: "integer"
          format: "int64"
  submitAnswers:
    type: "object"
    properties:
      answerText:
        type: "string"
        example: "is this the correct answer?"
      isCorrect:
        type: "integer"
        format: "int64"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
  Tag:
    type: "object"
    properties:
      tagId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      desc:
        type: "string"
  tagCount:
    type: "array"
    items:
      $ref: "#/definitions/tagCountObj"
  tagCountObj:
    type: "object"
    properties:
      tagId:
        type: "integer"
        format: "int64"
        description: "tagId is zero for combination tag counts"
      tagCount:
        type: "integer"
        format: "int64"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
