{
  "swagger": "2.0",
  "info": {
    "description": "This is the macro cards API.  To use it you will first need an application key.  You can find out more at macro.cards/apiref.",
    "version": "1.0.0",
    "title": "Macro Cards",
    "termsOfService": "https://macro.cards/terms/",
    "contact": {
      "email": "support@macropeople.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "api.macro.cards",
  "basePath": "/v1",
  "tags": [
    {
      "name": "tags",
      "description": "Choose a tag"
    },
    {
      "name": "cards",
      "description": "Taking questions one by one, and learning from the answers and explanations",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://macro.cards/about"
      }
    },
    {
      "name": "sessions",
      "description": "Taking a timed exam"
    },
    {
      "name": "submit",
      "description": "adding a question to the question bank",
      "externalDocs": {
        "description": "Find out more ",
        "url": "http://macro.cards/docs"
      }
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/tags": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Retrieve list of available tags",
        "description": "The user needs to choose a tag with which to play the game",
        "operationId": "getTags",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            }
          },
          "404": {
            "description": "No tags found"
          }
        }
      }
    },
    "/tags/{tagId}": {
      "put": {
        "tags": [
          "tags"
        ],
        "summary": "Update an existing tag",
        "description": "Update tag name or description",
        "operationId": "updateTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "ID of tag to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Tag not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/cards/findByTagAll": {
      "get": {
        "tags": [
          "cards"
        ],
        "summary": "Find Card with ALL supplied tags",
        "description": "Muliple tags can be provided with comma separated strings. Usetag1, tag2, tag3 for testing.",
        "operationId": "findCardByTagAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/cards/findByTagAny": {
      "get": {
        "tags": [
          "cards"
        ],
        "summary": "Find Card with ANY of the supplied tags",
        "description": "Muliple tags can be provided with comma separated strings. Usetag1, tag2, tag3 for testing.",
        "operationId": "findCardByTagAny",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/cards/{questionId}/verify": {
      "put": {
        "tags": [
          "cards"
        ],
        "summary": "Get result and explanation",
        "description": "Returns the result (pass / fail), the correct answer and the explanation",
        "operationId": "verifyCard",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "ID of question to verify",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cardResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Question not found"
          }
        }
      }
    },
    "/submit": {
      "put": {
        "tags": [
          "submit"
        ],
        "summary": "Submit a new question to the question bank",
        "description": "Accepts a question, set of answers, an explanation, and performs server side validation of the result",
        "operationId": "submitQuestion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user card",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newCard"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/submit/{questionId}": {
      "put": {
        "tags": [
          "submit"
        ],
        "summary": "Edit a question",
        "description": "Accepts a question, set of answers, an explanation, and performs server side validation of the result",
        "operationId": "editQuestion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "question ID to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created user card",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newCard"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "submit"
        ],
        "summary": "Deletes a question",
        "description": "Marks question as deleted",
        "operationId": "deleteQuestion",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Question not found"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user id",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID that needs to be fetched. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid userid supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Question": {
      "type": "object",
      "properties": {
        "questionId": {
          "type": "integer",
          "format": "int64"
        },
        "questionType": {
          "type": "string",
          "description": "Question Type",
          "enum": [
            "Single Answer",
            "Multiple Choice",
            "User Input"
          ]
        },
        "questionTitle": {
          "type": "string"
        },
        "questionBody": {
          "type": "string"
        },
        "answers": {
          "$ref": "#/definitions/Answers"
        }
      }
    },
    "Answers": {
      "type": "object",
      "properties": {
        "answerId": {
          "type": "integer",
          "format": "int64"
        },
        "answerText": {
          "type": "string"
        }
      }
    },
    "cardResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string",
          "description": "pass/fail",
          "enum": [
            "pass",
            "fail"
          ]
        },
        "answerId": {
          "type": "integer",
          "description": "the id of the correct answer",
          "format": "int64"
        },
        "answerText": {
          "type": "string",
          "example": "XYZ",
          "description": "the correct answer text (needed for user input)"
        },
        "explanationText": {
          "type": "string",
          "example": "you should have choosed XYZ, stupid"
        },
        "voteResult": {
          "type": "string",
          "example": "up",
          "description": "up/down"
        }
      }
    },
    "newCard": {
      "type": "object",
      "required": [
        "questionType",
        "questionTitle",
        "questionBody",
        "answers",
        "explanationText"
      ],
      "properties": {
        "questionType": {
          "type": "string",
          "description": "Question Type",
          "enum": [
            "Single Answer",
            "Multiple Choice",
            "User Input"
          ]
        },
        "questionTitle": {
          "type": "string",
          "example": "My very clever title"
        },
        "questionBody": {
          "type": "string",
          "example": "What comes of nothing?"
        },
        "answers": {
          "$ref": "#/definitions/submitAnswers"
        },
        "explanationText": {
          "type": "string",
          "example": "nothing comes of nothing"
        },
        "tags": {
          "type": "array",
          "description": "comma separated list of ID tags",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "submitAnswers": {
      "type": "object",
      "properties": {
        "answerText": {
          "type": "string",
          "example": "is this the correct answer?"
        },
        "isCorrect": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}